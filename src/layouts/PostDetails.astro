---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import type { CollectionEntry } from "astro:content";
import BlobIcon from "@components/BlobIcon.astro";
import LinkList from "@components/LinkList.astro";
import { getCollection } from "astro:content";

export interface Props {
  post: CollectionEntry<"garden" | "stream" | "page" | "now">;
  collection: "garden" | "stream";
}

const { post, collection } = Astro.props;

const {
  title,
  description,
  ogImage,
  publishDatetime,
  updateDatetime,
  tags,
  incomingLinks,
  outgoingLinks,
} = post.data as CollectionEntry<"garden" | "stream">["data"];

const noteState = "noteState" in post.data ? post.data.noteState : undefined;

const { Content } = await post.render();

const ogUrl = new URL(ogImage ? ogImage : `${post.slug}.svg`, Astro.url.origin)
  .href;

const noteType = noteState ? post.data.noteState : post.data.streamType;
const updateYear = updateDatetime.toLocaleDateString([], {
  year: "numeric",
});

const updateMonth = updateDatetime.toLocaleDateString([], {
  month: "short",
});

const updateDay = updateDatetime.toLocaleDateString([], {
  day: "numeric",
});

// Fetch all posts for link validation
const allGardenNotes = await getCollection("garden");
const allStreams = await getCollection("stream");
const allContent = [...allGardenNotes, ...allStreams];
const dateType =
  new Date(updateDatetime) > new Date(publishDatetime)
    ? "Updated"
    : "Published";
---

<Layout
  title={title}
  description={description}
  ogImage={ogUrl}
  hasWaveSeparator={false}
>
  <Fragment slot="header">
    <Header activeNav={collection} />
  </Fragment>

  <main id="main-content" class="relative">
    <aside class="relative flex flex-col items-center -top-16">
      <span class="relative z-30">
        <BlobIcon type={noteType} className="size-32" />
      </span>
      <div
        class="flex flex-col gap-2 font-montserrat dark:text-skin-inverted text-skin-inverted dark:[text-shadow:_0_1px_10px_rgb(255_255_255_/_10%)] [text-shadow:_0_1px_10px_rgb(0_0_0_/_10%)] text-center items-center dark:bg-[#5d2689] bg-[#cbc1ff] pt-24 pb-5 px-2 -top-12 relative w-3/5 leading-none"
      >
        <div
          class="uppercase absolute top-14 left-1/2 transform -translate-x-1/2 bg-skin-card text-skin-inverted font-bold px-4 py-1 whitespace-nowrap"
        >
          {noteType}
        </div>
        <span class="text-4xl font-black leading-none tracking-wider">
          {updateDay}
        </span>
        <span
          class="uppercase font-medium tracking-widest border-b border-skin-card dark:border-skin-card/60 pb-2"
        >
          {updateMonth}
        </span>
        <span class="tracking-wider font-semibold">{updateYear}</span>
        <div
          class="uppercase text-xs absolute -bottom-5 left-1/2 transform -translate-x-1/2 bg-skin-card text-skin-inverted font-medium px-2 py-1 whitespace-nowrap"
        >
          <!-- if publish date and update date, show date type like published or updated -->
          {dateType}
        </div>
      </div>
    </aside>

    <div class="">
      <h1 class="post-title">{title}</h1>
      <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
        <Content />
        {
          tags && tags.length > 0 && (
            <ul class="tags-container">
              {tags.map((tag: string) => (
                <Tag name={tag} />
              ))}
            </ul>
          )
        }
      </article>
      <div class="mt-8 flex gap-12">
        <LinkList
          links={incomingLinks || []}
          type="incoming"
          allPosts={allContent}
        />
        <LinkList
          links={outgoingLinks || []}
          type="outgoing"
          allPosts={allContent}
        />
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto relative z-20 w-full max-w-5xl px-4 pt-16 pb-12  flex gap-8 overflow-hidden;
  }
  main:before {
    @apply border-l-2 border-t-2 border-dashed border-skin-card/40 rounded-tl-3xl;
    content: " ";
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    top: 2rem;
    left: 5rem;
    right: 0;
    bottom: 0;
    z-index: -1;
  }

  #article {
    @apply border-b-2 border-dashed border-skin-card/40;
  }

  .post-title {
    @apply text-4xl font-extrabold text-skin-accent;
  }
  .tags-container {
    @apply mt-8 ml-0 p-0;
  }
</style>
