---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import type { CollectionEntry } from "astro:content";
import BlobIcon from "@components/BlobIcon.astro";
import LinkList from "@components/LinkList.astro";
import { getCollection } from "astro:content";
import { transformTag } from "@utils/tagUtils";

export interface Props {
  post: CollectionEntry<"garden" | "stream" | "page" | "now">;
  collection: "garden" | "stream" | "now";
}

const { post, collection } = Astro.props;

const {
  title,
  description,
  ogImage,
  publishDatetime,
  updateDatetime,
  tags,
  incomingLinks,
  outgoingLinks,
} = post.data as CollectionEntry<"garden" | "stream">["data"];

const noteState = "noteState" in post.data ? post.data.noteState : undefined;

const { Content } = await post.render();

const ogUrl = new URL(ogImage ? ogImage : `${post.slug}.svg`, Astro.url.origin)
  .href;

const noteType = noteState
  ? (post.data as any).noteState
  : (post.data as any).streamType;
const fullUpdateDate = updateDatetime.toLocaleDateString([], {
  year: "numeric",
  month: "short",
  day: "numeric",
});
// const fullPublishDate = publishDatetime.toLocaleDateString([], {
//   year: "numeric",
//   month: "short",
//   day: "numeric",
// });
// const updateYear = updateDatetime.toLocaleDateString([], {
//   year: "numeric",
// });

// const updateMonth = updateDatetime.toLocaleDateString([], {
//   month: "short",
// });

// const updateDay = updateDatetime.toLocaleDateString([], {
//   day: "numeric",
// });

// Fetch all posts for link validation
const allGardenNotes = await getCollection("garden");
const allStreams = await getCollection("stream");
const allContent = [...allGardenNotes, ...allStreams];
// const dateType =
//   new Date(updateDatetime) > new Date(publishDatetime)
//     ? "Updated"
//     : "Published";
---

<Layout
  title={title}
  description={description}
  ogImage={ogUrl}
  hasWaveSeparator={false}
>
  <Fragment slot="header">
    {collection === "now" ? <Header /> : <Header activeNav={collection} />}
  </Fragment>

  <main id="main-content" class="relative">
    <div class="max-w-3xl mx-auto">
      <div
        class="relative flex-col pb-12 border-b-2 border-dashed border-skin-card flex gap-8"
      >
        <h1 class="text-5xl text-left font-extrabold text-skin-accent w-full">
          {title}
        </h1>
        <div class="description text-3xl">
          {description}
        </div>
        <div
          class="uppercase absolute -bottom-11 right-0 flex items-center w-full justify-end"
        >
          <span class="z-30 translate-x-4 contrast-125 -rotate-[25deg]">
            <BlobIcon type={noteType} className="size-12 scale-150" />
          </span>
          <span
            class="relative flex items-center pl-6 flex-col border border-skin-card bg-skin-card/60 py-1 px-3"
          >
            {noteType}
          </span>
          <div class="flex flex-col border-skin-card border py-1 px-3">
            <span class="">
              {fullUpdateDate}
            </span>
          </div>
        </div>
      </div>
      {
        tags && tags.length > 0 && (
          <ul class="tags-container">
            {tags.map((tag: string) => {
              const { slug, display } = transformTag(tag);
              return <Tag name={slug} display={display} />;
            })}
          </ul>
        )
      }

      <article
        id="article"
        role="article"
        class="prose dark:prose-invert mx-auto text-2xl mt-8 pt-4 max-w-3xl prose-p:text-2xl prose-p:font-light"
      >
        <Content />
      </article>
      <div class="mt-28 flex gap-12">
        <LinkList
          links={incomingLinks || []}
          type="incoming"
          allPosts={allContent}
        />
        <LinkList
          links={outgoingLinks || []}
          type="outgoing"
          allPosts={allContent}
        />
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<style>
  main {
    @apply mx-auto relative z-20 w-full max-w-5xl px-4 pt-24 pb-12  flex gap-8;
  }

  aside {
    display: none;
  }

  #article {
    @apply border-b-2 pb-16 border-dashed border-skin-card/40;
  }

  .post-title {
    @apply text-5xl text-center font-extrabold text-skin-accent w-full;
  }
  .tags-container {
    @apply mt-2 ml-0 p-0 w-3/5;
  }
</style>
<script>
  // add listener to all callout nodes.
  const callouts = document.querySelectorAll(".callout");
  callouts.forEach(callout => {
    if (callout.getAttribute("data-expandable") === "true") {
      callout.addEventListener("click", function (event) {
        const currentTarget = event.currentTarget;
        const isExpanded =
          currentTarget.getAttribute("data-expanded") === "true";
        // Toggle the data-expanded attribute
        currentTarget.setAttribute("data-expanded", (!isExpanded).toString());
      });
    }
  });
</script>
