---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Notes from "@layouts/Notes.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import { SITE } from "@config";
import Header from "@components/Header.astro";
import Main from "@layouts/Main.astro";
import NoteSummaryCard from "@components/NoteSummaryCard.astro";

export interface Props {
  post: CollectionEntry<"stream">;
}

type StreamType = CollectionEntry<"stream">["data"]["streamType"];

export async function getStaticPaths() {
  const posts = await getCollection("stream", ({ data }) => !data.draft);
  const sortedPosts = getSortedPosts(posts);
  const streamTypes = [...new Set(posts.map(post => post.data.streamType))];
  const pagePaths = getPageNumbers(sortedPosts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));
  const filterPaths = streamTypes.map(streamType => ({
    params: { slug: streamType },
  }));
  return [...pagePaths, ...filterPaths];
}

const { slug } = Astro.params;
const posts = (await getCollection("stream")) as CollectionEntry<"stream">[];
const sortedPosts = getSortedPosts(posts) as CollectionEntry<"stream">[];
const totalPages = getPageNumbers(sortedPosts.length);
const streamTypes = [...new Set(posts.map(post => post.data.streamType))];

let currentPage = 1;
let filteredPosts = sortedPosts;
let paginatedPosts = sortedPosts;

if (streamTypes.includes(slug as StreamType) && isNaN(Number(slug))) {
  // Filter by stream type without pagination
  filteredPosts = sortedPosts.filter(post => post.data.streamType === slug);
  paginatedPosts = filteredPosts;
  currentPage = 1;
} else {
  // Paginate
  currentPage =
    slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
      ? Number(slug)
      : 1;
  const lastPost = currentPage * SITE.postPerPage;
  const startPost = lastPost - SITE.postPerPage;
  paginatedPosts = sortedPosts.slice(startPost, lastPost);
}

const pageTitle = streamTypes.includes(slug as StreamType)
  ? `${slug} Stream`
  : "Digital Stream of Resources";

const pageDesc = streamTypes.includes(slug as StreamType)
  ? `Filtered view of ${slug} content from my digital stream.`
  : "Content I've collected from around the interwebs that aligns with my interests and supports my learning journey, making it easier to revisit and share with others.";
---

<Notes
  posts={paginatedPosts}
  pageNum={currentPage}
  totalPages={streamTypes.includes(slug as StreamType)
    ? 1
    : Math.ceil(sortedPosts.length / SITE.postPerPage)}
  collectionType="stream"
>
  <Main pageTitle={pageTitle} pageDesc={pageDesc}>
    <div
      class="flex justify-center font-medium font-montserrat uppercase text-sm space-x-2 mb-6"
    >
      <a
        href="/stream"
        class={`px-6 h-8 flex border items-center rounded-3xl bg-skin-card/15 border-skin-accent/15 hover:bg-skin-card/50 hover:border-skin-accent/60`}
        >All</a
      >
      {
        streamTypes.map(type => (
          <a
            href={`/stream/${type}`}
            class={`px-4 h-8 flex border items-center rounded-3xl ${slug === type ? "bg-skin-card border-skin-fill/30 text-skin-inverted" : "bg-skin-card/15 border-skin-accent/15 hover:bg-skin-card/50 hover:border-skin-accent/60"}`}
          >
            {type}
          </a>
        ))
      }
    </div>
    <ul class="flex flex-col gap-16">
      {
        paginatedPosts.map(({ data, slug }) => (
          <NoteSummaryCard
            href={`/${slug}`}
            frontmatter={data as CollectionEntry<"stream">["data"]}
            cardType={"stream"}
            expanded
          />
        ))
      }
    </ul>
  </Main>
</Notes>
